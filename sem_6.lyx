#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\KOMAoptions{headings=small}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman Adobe Garamond Pro
\font_sans Helvetica Neue
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
ME1308 - 6 - Lean Innovative Operations
\end_layout

\begin_layout Author
Johan Bj√∂rklund, u1480nqu, 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

johbjo09@gmail.com
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Background: lean software development
\end_layout

\begin_layout Standard
The styles of processes in software development and IT projects might be
 characterized into two major types, each typified by the environment and
 requirements where they first emerged.
\end_layout

\begin_layout Subsection*
Intensive pre-planning and documentation: institutionalised projects
\end_layout

\begin_layout Itemize
Examples: 
\begin_inset Quotes eld
\end_inset

Waterfall
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Structured systems analysis and design methods
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Largely 
\begin_inset Quotes eld
\end_inset

all
\begin_inset Quotes erd
\end_inset

 projects in early IT-development (1960:s to 1980:s) were conducted with
 intensive pre-planning and minute documentation of requirements.
 The customers of these projects were government and military agencies,
 or maybe large institutions in finance (banks, insurance), aero-space and
 industrial firms, etc - rarely were they end consumers.
 Big projects for customers that expected big returns.
\end_layout

\begin_layout Standard
Key factors that make intensive pre-planning necessary are:
\end_layout

\begin_layout Itemize
High cost of failure (safety, aero-space, finance, industrial processes)
\end_layout

\begin_layout Itemize
Cost of iterations
\end_layout

\begin_deeper
\begin_layout Itemize
cycle time (cost of rebooting a smelting plant, pulp plant, rebooting factories,
 process-industries)
\end_layout

\begin_layout Itemize
expensive tests (missiles, bombs, rockets, aeroplanes)
\end_layout

\begin_layout Itemize
computer running time is expensive; automated testing impractical
\end_layout

\end_deeper
\begin_layout Itemize
Requirements are detailed and known in advance
\end_layout

\begin_deeper
\begin_layout Itemize
i.e.
 the project is cleared based on specifications (military, government agencies),
 or calculated returns (finance, detailed business cases)
\end_layout

\end_deeper
\begin_layout Subsection*
Iterative development: web services
\end_layout

\begin_layout Standard
Software and services that are developed for end consumers, proposed to
 fill a market need, have one key characteristic:
\end_layout

\begin_layout Itemize
Final requirements for customer satisfaction are unkown
\end_layout

\begin_layout Standard
As the internet grew into a platform for distributing services for end consumers
, ability to develop in quick iterations and learn from customer behaviour
 proved to be an important factor for success.
 Wide impact of iterative development was first seen in early consumer internet
 services; enabling factors were low cost of failure (services were a form
 of entertainment), and updates/iterations are essentially free as web-services
 are centralised and updates are immediate.
 The key factors that enable quick iterations are:
\end_layout

\begin_layout Itemize
Low cost of failure
\end_layout

\begin_layout Itemize
Improvements and features may be tested on subsets of customers without
 breaking requirements
\end_layout

\begin_layout Itemize
Cost of testing is low
\end_layout

\begin_deeper
\begin_layout Itemize
Fast build-times, modularisation, allow fast iterative testing of individual
 components
\end_layout

\end_deeper
\begin_layout Standard
One important and major outcome of the iterative process:
\end_layout

\begin_layout Itemize
discovering requirements for a loosely defined problem
\end_layout

\begin_layout Standard
We see that when end customer demand, or criterias for success, is loosely
 defined, then iterative development is suitable.
\end_layout

\begin_layout Subsection*
Lean, iterative development and 
\begin_inset Quotes eld
\end_inset

agile
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The iterative process shares characteristics with lean, and there has been
 various interpretations of the goals and methods of lean production as
 applied to software development; one of them widely known is 
\begin_inset Quotes eld
\end_inset

agile
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.agilemanifesto.org/principles.html
\end_layout

\end_inset


\end_layout

\end_inset

.
 Agile is a collection of goals (not a wholesale process or methodology)
 and if achieved, echoes the some of the principles of lean:
\end_layout

\begin_layout Itemize
Continual improvement
\end_layout

\begin_layout Itemize
Free flow of information
\end_layout

\begin_layout Itemize
Minimize work in progress
\end_layout

\begin_layout Itemize
Pull dynamics
\end_layout

\begin_layout Standard
Lean and agile are sometimes used interchangeably in software jargon.
\end_layout

\begin_layout Standard
The source of many of the ideas in this report regarding agile is David
 J Andersson
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.djaa.com
\end_layout

\end_inset


\end_layout

\end_inset

, who after experience from managing software projects synthesized ideas
 from operations management (Theory of Constraints) and lean to write 
\begin_inset Quotes eld
\end_inset

Agile Management for Software Engineering - Applying the Theory of Constraints
 for Business Results
\begin_inset Quotes erd
\end_inset

.
 He gives many accounts of common practical problems and examples of failure/suc
cess.
\end_layout

\begin_layout Standard
One key methodology in lean software, that bears its japanese name (inspired
 from the Toyota Production System), is 
\emph on
kanban
\emph default
.
 In short, kanban (in software) allows pull-dynamics for individual developers,
 but it requires certain responsibilities and investments from managers/customer
s depending on the type of project.
\end_layout

\begin_layout Section*
Conflicts and challenges
\end_layout

\begin_layout Standard
On big projects, it is necessary to perform iterations on modules and components.
 The two major challenges in 
\begin_inset Quotes eld
\end_inset

achieving agile
\begin_inset Quotes erd
\end_inset

 in a development project can be summarized as:
\end_layout

\begin_layout Enumerate
Identifying key success factors for the project at hand:
\end_layout

\begin_deeper
\begin_layout Itemize
cost of failure, cost of testing, detail of requirements known in advance
\end_layout

\end_deeper
\begin_layout Enumerate
Deviding and slicing big projects into pieces (modules) which might be iterated
 on:
\end_layout

\begin_deeper
\begin_layout Itemize
Modules and features must have appropriate success factors for iteration,
 refer to (1)
\end_layout

\begin_layout Itemize
Interdependencies between modules must be determined in advance
\end_layout

\begin_deeper
\begin_layout Itemize
To plan the time-order when modules are developed
\end_layout

\end_deeper
\begin_layout Itemize
The size of the sub-project or feature must fit into alotted capacity
\end_layout

\begin_deeper
\begin_layout Itemize
Incorrect sizing of will lead to overload
\end_layout

\begin_deeper
\begin_layout Itemize
Overload will force prioritisation too late in the process
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Because iterations on sub-projects might not have natural 
\begin_inset Quotes eld
\end_inset

states of completion
\begin_inset Quotes erd
\end_inset

 (for example user experience), decisions must be made on appropriate level
 of quality or functionality
\end_layout

\end_deeper
\begin_layout Standard
Making these distinctions and decisions requires deep technical knowledge
 of the project.
 The end requirements might be unknown, but enough understanding is necessary
 to make meaningful estimates of time requirements, interdepencies of modules
 and components.
\end_layout

\begin_layout Subsection*
Symptoms of mis-implementation
\end_layout

\begin_layout Standard
Typical symptoms of failure to implement agile are
\begin_inset Foot
status open

\begin_layout Plain Layout
David J Andersson; http://www.djaa.com/resources
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
Time-crunch (or 
\begin_inset Quotes eld
\end_inset

crunch time
\begin_inset Quotes erd
\end_inset

, as in critical or intense period of finishing tasks), can be caused by:
\end_layout

\begin_deeper
\begin_layout Itemize
Failure to plan appropriate time-slices, or quality-requirements of features;
 caused too much time to be spent on lower priority-features
\end_layout

\begin_layout Itemize
Less time available to work on high priority features that were planned
 or deferred
\end_layout

\begin_layout Itemize
Leads to late prioritisation of features/requirements
\end_layout

\begin_deeper
\begin_layout Itemize
End product becomes a consequence of 
\begin_inset Quotes eld
\end_inset

chance
\begin_inset Quotes erd
\end_inset

 rather than considered compromises
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Overload leads to exhausting developers
\end_layout

\begin_deeper
\begin_layout Itemize
low quality
\end_layout

\begin_deeper
\begin_layout Itemize
errors cause more iterations and slow progress
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection*
Summary of lean software methodologies
\end_layout

\begin_layout Standard
Lean or agile software development achieves effeciencies by:
\end_layout

\begin_layout Itemize
Spreading the design and requirements work over the time duration of the
 project, allowing the project to adapt to uncertainties
\end_layout

\begin_layout Itemize
Allowing developers to focus on one task at a time, not worrying about prioritiz
ation
\end_layout

\begin_layout Itemize
Deferring decisions until necessary (but not later); a consequence of proper
 iterations, enables efficiencies by not spending time/energy on tasks which
 might be inconsequential to final product
\end_layout

\begin_layout Section*
Lean software and innovation at DICE
\end_layout

\begin_layout Standard
Innovation has two sources at a company like DICE; design (by 
\begin_inset Quotes eld
\end_inset

artists
\begin_inset Quotes erd
\end_inset

) and technology (by developers) - together they form the 
\begin_inset Quotes eld
\end_inset

experience
\begin_inset Quotes erd
\end_inset

.
 Key factors: the relation between these two 
\begin_inset Quotes eld
\end_inset

flows
\begin_inset Quotes erd
\end_inset

 is loosely coupled; one does not rule over the other and uptake of ideas
 is voluntary (somewhat.) Our strategy for innovation is to relieve tension
 in the work chain, to allow time for more experimentation and free thinking.
 We will attempt to apply lean methodologies to reduce unnecessary work,
 to clarify chains of communication and responsibility.
\end_layout

\begin_layout Standard
Two parts to implementing methodologies; introducing practices and maintaining
 them.
 Experience
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.gamesindustry.biz/articles/2015-07-06-soderlund
\end_layout

\end_inset


\end_layout

\end_inset

 shows that, in general, that introduction of new practices among developers
 must be voluntary, and benefits must be demonstrated by example.
 Whether versions of these practices are already in place at DICE; the challenge
s remain 1) to spread use and acceptance of certain practices among developers
 2) and to monitor for misuse, sub-optimisation or problems.
\end_layout

\begin_layout Standard
We see that introducing use of practices and tools then is a matter of communica
tion, and makes necessary appropriate channels and forums for discussion
 and debate.
 We see that cross-team communication, and office lay out play their parts.
\end_layout

\begin_layout Paragraph*
Slicing into tasks and sub-projects
\end_layout

\begin_layout Standard
In order to achieve pull-dynamics (for example with kanban) on the level
 of individual developers or small teams, projects must sliced into smaller
 tasks and prioritized.
 This is one of the responsibilities which lean software demands be handled
 by managers, and thus we need to define the responsiblity of this role
 as:
\end_layout

\begin_layout Itemize
The project-owner (definer of tasks) must:
\end_layout

\begin_deeper
\begin_layout Itemize
slice projects into sub-projects/tasks that may be 
\begin_inset Quotes eld
\end_inset

pulled
\begin_inset Quotes erd
\end_inset

 for work by developers or teams
\end_layout

\begin_layout Itemize
decide requirements for functionality/quality of tasks in order to fit into
 entire project time-frame
\end_layout

\end_deeper
\begin_layout Standard
This role may be performed by many different positions in a company; but
 in game production at DICE, most tasks are coordinated by a 
\begin_inset Quotes eld
\end_inset

Producer
\begin_inset Quotes erd
\end_inset

 which has creative responsibility for the end product.
 It might be unreasonable to require creative producers be able to decide
 technical levels of functionality/quality for features; and thus pure pull/kanb
an-style methods might be unsuitable for this particular case.
 New jargon/language might be necessary (
\begin_inset Quotes eld
\end_inset

urgent and half-good
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

not urgent, fully acceptance tested
\begin_inset Quotes erd
\end_inset

 ...)
\end_layout

\begin_layout Standard
The producer role is one of the more demanding at DICE, especially at crunch
 time.
 Producer for 
\begin_inset Quotes eld
\end_inset

Star Wars: Battlefront
\begin_inset Quotes erd
\end_inset

 Sigurlina Ingvarsdottir reports
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://fortune.com/2015/09/22/sigurlina-ingvarsdottir-star-wars-battlefront/
\end_layout

\end_inset


\end_layout

\end_inset

 12 hour work days during the months prior to release.
 Further study might decide whether this could be improved by our suggested
 methods.
\end_layout

\begin_layout Subsection*
Monitoring
\end_layout

\begin_layout Standard
To monitor for misimplementation or failures in planning, we need to keep
 measurements that can capture symptoms of typical failures, such as:
\end_layout

\begin_layout Itemize
To be able to prevent time-crunch in advance:
\end_layout

\begin_deeper
\begin_layout Itemize
Measure time/rate of completion of relevant work units (tasks/features/modules/p
rojects)
\end_layout

\begin_layout Itemize
Monitor progress as percentage of entire project, make sure completion-rate
 of sub-tasks allows total completion within time-frime
\end_layout

\begin_deeper
\begin_layout Itemize
If this fails to catch time-crunch, it means slicing and time-estimates
 of tasks and requirements are poor.
 It might be impossible to improve, but this should cause feedback to managers
 responsible for task-prioritisation in order to improve estimates
\end_layout

\end_deeper
\begin_layout Itemize
Measure daily work hours and output of developers.
 Watch for trends.
\end_layout

\begin_deeper
\begin_layout Itemize
developers/managers should not compensate for bad planning by increasing
 work hours and intensity.
 This is the definition of 
\begin_inset Quotes eld
\end_inset

crunch time
\begin_inset Quotes erd
\end_inset

, which is a symptom to watch for
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
To catch quality issues
\end_layout

\begin_deeper
\begin_layout Itemize
Automated testing, bug density, number of failing tests
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Unit testing: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Unit_testing
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Relevant quality tests
\end_layout

\end_deeper
\begin_layout Standard
Mitigation involves:
\end_layout

\begin_layout Itemize
Cutting features/requirements
\end_layout

\begin_layout Itemize
Assigning more resources
\end_layout

\begin_layout Subsection*
Strategy for minimizing work
\end_layout

\begin_layout Standard
The goal is to avoid work that has small impact on end result, and instead
 invest time on high impact features.
 A strategy is needed to identify high-impact features.
\end_layout

\begin_layout Standard
The long cycle-time of products at DICE make small increments impractical.
 However, alternative strategies might work: releasing free, limited, previews
 of games in between product cycles.
 These could be instrumented to collect usage data.
 Usage data is then used for prioritizations in final release.
 The fact that the limited versions are free provide the justification for
 collecting data from the usage, avoiding unnecessary fear and negative
 publicity.
\end_layout

\begin_layout Subsection*
Pitfalls
\end_layout

\begin_layout Itemize
Frequent changes in plans and prioritizations cause dissatisfaction as developer
s might not be able to finish bigger tasks/projects
\end_layout

\begin_layout Itemize
Tasks with unclear goals or conditions for success
\end_layout

\begin_layout Section*
Conclusion
\end_layout

\begin_layout Standard
The specific conditions at DICE which make straightforward implementation
 of lean software difficult are: long cycle times and big projects.
 Big projects lack that natural pacemaker that fast iterations have.
 There might be long periods between task-completion and final release of
 the end product, which removes the technical feedback and psychological
 sense of achievement that is a natural phenomenon in quick iteration-developmen
t.
 Instead, the role of pacemaker is placed on internal managers and producers
 - which leads to intense periods of crunch-time.
\end_layout

\begin_layout Standard
The biggest challenge is likely to be in finding useful ways of slicing
 projects early in the development cycle.
 If that can be overcome, the benefits of lean software are predictable
 work loads, higher quality, and more consumer-focused products.
\end_layout

\end_body
\end_document
